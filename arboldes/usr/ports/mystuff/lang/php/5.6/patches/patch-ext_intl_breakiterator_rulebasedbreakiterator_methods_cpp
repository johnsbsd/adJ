$OpenBSD$

Index: ext/intl/breakiterator/rulebasedbreakiterator_methods.cpp
--- ext/intl/breakiterator/rulebasedbreakiterator_methods.cpp.orig
+++ ext/intl/breakiterator/rulebasedbreakiterator_methods.cpp
@@ -25,8 +25,8 @@ extern "C" {
 
 #include "../intl_convertcpp.h"
 
-static inline RuleBasedBreakIterator *fetch_rbbi(BreakIterator_object *bio) {
-	return (RuleBasedBreakIterator*)bio->biter;
+static inline icu::RuleBasedBreakIterator *fetch_rbbi(BreakIterator_object *bio) {
+	return (icu::RuleBasedBreakIterator*)bio->biter;
 }
 
 static void _php_intlrbbi_constructor_body(INTERNAL_FUNCTION_PARAMETERS)
@@ -46,10 +46,10 @@ static void _php_intlrbbi_constructor_body(INTERNAL_FU
 	}
 
 	// instantiation of ICU object
-	RuleBasedBreakIterator *rbbi;
+	icu::RuleBasedBreakIterator *rbbi;
 
 	if (!compiled) {
-		UnicodeString	rulesStr;
+		icu::UnicodeString	rulesStr;
 		UParseError		parseError = UParseError();
 		if (intl_stringFromChar(rulesStr, rules, rules_len, &status)
 				== FAILURE) {
@@ -59,7 +59,7 @@ static void _php_intlrbbi_constructor_body(INTERNAL_FU
 			RETURN_NULL();
 		}
 
-		rbbi = new RuleBasedBreakIterator(rulesStr, parseError, status);
+		rbbi = new icu::RuleBasedBreakIterator(rulesStr, parseError, status);
 		intl_error_set_code(NULL, status TSRMLS_CC);
 		if (U_FAILURE(status)) {
 			char *msg;
@@ -75,7 +75,7 @@ static void _php_intlrbbi_constructor_body(INTERNAL_FU
 		}
 	} else { // compiled
 #if U_ICU_VERSION_MAJOR_NUM * 10 + U_ICU_VERSION_MINOR_NUM >= 48
-		rbbi = new RuleBasedBreakIterator((uint8_t*)rules, rules_len, status);
+		rbbi = new icu::RuleBasedBreakIterator((uint8_t*)rules, rules_len, status);
 		if (U_FAILURE(status)) {
 			intl_error_set(NULL, status, "rbbi_create_instance: unable to "
 				"create instance from compiled rules", 0 TSRMLS_CC);
@@ -119,7 +119,7 @@ U_CFUNC PHP_FUNCTION(rbbi_get_rules)
 
 	BREAKITER_METHOD_FETCH_OBJECT;
 
-	const UnicodeString rules = fetch_rbbi(bio)->getRules();
+	const icu::UnicodeString rules = fetch_rbbi(bio)->getRules();
 
 	Z_TYPE_P(return_value) = IS_STRING;
 	if (intl_charFromString(rules, &Z_STRVAL_P(return_value),
