$OpenBSD$

Index: tests/translittest.cpp
--- tests/translittest.cpp.orig
+++ tests/translittest.cpp
@@ -36,7 +36,7 @@
 using namespace std;
 
 // Print the given string to stdout
-void uprintf(const UnicodeString &str) {
+void uprintf(const icu::UnicodeString &str) {
     char *buf = 0;
     int32_t len = str.length();
     // int32_t bufLen = str.extract(0, len, buf); // Preflight
@@ -90,7 +90,7 @@ int main() {
 		u_errorName(status) << std::endl;
 	return 0;
   } 
-  std::cout << "available " << Transliterator::countAvailableIDs() << std::endl;
+  std::cout << "available " << icu::Transliterator::countAvailableIDs() << std::endl;
   //udata_setAppData("/usr/local/lib/sword/swicu.dat" , pAppData, &status);
   //if (U_FAILURE(status)) 
   //{
@@ -99,20 +99,20 @@ int main() {
 	//return 0;
   //} 
 
-  int32_t i_ids = Transliterator::countAvailableIDs();
+  int32_t i_ids = icu::Transliterator::countAvailableIDs();
   
   std::cout << "available " << i_ids << std::endl;
   for (int i=0; i<i_ids;i++)
   {
 	std::cout << "id " << i << ": ";
-	uprintf(Transliterator::getAvailableID(i));
+	uprintf(icu::Transliterator::getAvailableID(i));
 	std::cout << std::endl;
   } 
 
 
   //UTF8Transliterator utran = new UTF8Transliterator();
   std::cout << "creating transliterator 2" << std::endl;
-  Transliterator *btrans = Transliterator::createInstance("NFD;Latin-Greek;NFC", 
+  icu::Transliterator *btrans = icu::Transliterator::createInstance("NFD;Latin-Greek;NFC", 
 	UTRANS_FORWARD, status);
   if (U_FAILURE(status)) 
   {
@@ -121,7 +121,7 @@ int main() {
 	return 0;
   } 
   std::cout << "creating transliterator 1" << std::endl;
-  Transliterator *trans = Transliterator::createInstance("NFD;Latin-Gothic;NFC", 
+  icu::Transliterator *trans = icu::Transliterator::createInstance("NFD;Latin-Gothic;NFC", 
 	UTRANS_FORWARD, status);
   if (U_FAILURE(status)) 
   {
