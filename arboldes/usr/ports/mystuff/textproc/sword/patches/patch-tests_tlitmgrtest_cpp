$OpenBSD$

Index: tests/tlitmgrtest.cpp
--- tests/tlitmgrtest.cpp.orig
+++ tests/tlitmgrtest.cpp
@@ -73,9 +73,9 @@
             colBund = ures_getByIndex(transIDs, row, 0, &status);
 
             if (U_SUCCESS(status) && ures_getSize(colBund) == 4) {
-                UnicodeString id = ures_getUnicodeStringByIndex(colBund, 0, &status);
+                icu::UnicodeString id = ures_getUnicodeStringByIndex(colBund, 0, &status);
                 UChar type = ures_getUnicodeStringByIndex(colBund, 1, &status).charAt(0);
-                UnicodeString resString = ures_getUnicodeStringByIndex(colBund, 2, &status);
+                icu::UnicodeString resString = ures_getUnicodeStringByIndex(colBund, 2, &status);
 
                 if (U_SUCCESS(status)) {
                     switch (type) {
@@ -133,7 +133,7 @@
 */
 
 
-/*Transliterator* TransliteratorRegistry::instantiateEntry(const UnicodeString& ID,
+/*Transliterator* TransliteratorRegistry::instantiateEntry(const icu::UnicodeString& ID,
                                                          Entry *entry,
                                                          TransliteratorAlias* &aliasReturn,
                                                          UParseError& parseError,
@@ -150,7 +150,7 @@
         } else if (entry->entryType == Entry::FACTORY) {
             return entry->u.factory.function(ID, entry->u.factory.context);
         } else if (entry->entryType == Entry::COMPOUND_RBT) {
-            UnicodeString id("_", "");
+            icu::UnicodeString id("_", "");
             Transliterator *t = new RuleBasedTransliterator(id, entry->u.data);
             aliasReturn = new TransliteratorAlias(ID, entry->stringArg, t, entry->intArg, entry->compoundFilter);
             return 0;
@@ -176,7 +176,7 @@
             // name; this in no way represents an actual locale.
             CharString ch(entry->stringArg);
             UResourceBundle *bundle = ures_openDirect(0, ch, &status);
-            UnicodeString rules = ures_getUnicodeStringByKey(bundle, RB_RULE, &status);
+            icu::UnicodeString rules = ures_getUnicodeStringByKey(bundle, RB_RULE, &status);
             ures_close(bundle);
 
             // If the status indicates a failure, then we don't have any
@@ -249,7 +249,7 @@
 
 class SWCharString {
  public:
-    inline SWCharString(const UnicodeString& str);
+    inline SWCharString(const icu::UnicodeString& str);
     inline ~SWCharString();
     inline operator const char*() { return ptr; }
  private:
@@ -257,7 +257,7 @@ class SWCharString {
     char* ptr;
 };
 
-inline SWCharString::SWCharString(const UnicodeString& str) {
+inline SWCharString::SWCharString(const icu::UnicodeString& str) {
     // TODO This isn't quite right -- we should probably do
     // preflighting here to determine the real length.
     if (str.length() >= (int32_t)sizeof(buf)) {
@@ -287,21 +287,21 @@ static const char SW_RESDATA[] = "/usr/local/lib/sword
 using namespace std;
 
 struct SWTransData {
-	UnicodeString resource;
+	icu::UnicodeString resource;
 	UTransDirection dir;
 };
 
-typedef map <const UnicodeString, SWTransData> SWTransMap;
+typedef map <const icu::UnicodeString, SWTransData> SWTransMap;
 
-typedef pair<UnicodeString, SWTransData> SWTransPair;
+typedef pair<icu::UnicodeString, SWTransData> SWTransPair;
 
 SWTransMap *sw_tmap;
 
-Transliterator * instantiateTrans(const UnicodeString& ID, const UnicodeString& resource,
+icu::Transliterator * instantiateTrans(const icu::UnicodeString& ID, const icu::UnicodeString& resource,
 		UTransDirection dir, UParseError &parseError, UErrorCode &status );
 
-Transliterator *SWTransFactory(const UnicodeString &ID, 
-	Transliterator::Token context)
+icu::Transliterator *SWTransFactory(const icu::UnicodeString &ID, 
+	icu::Transliterator::Token context)
 {
 	std::cout << "running factory for " << ID << std::endl;
 	SWTransMap::iterator swelement;
@@ -312,19 +312,19 @@ Transliterator *SWTransFactory(const UnicodeString &ID
 		UParseError parseError;
 		UErrorCode status;
 		std::cout << "unregistering " << ID << std::endl;
-		Transliterator::unregister(ID);
+		icu::Transliterator::unregister(ID);
 		std::cout << "resource is " << swstuff.resource << std::endl;
-		Transliterator *trans = instantiateTrans(ID, swstuff.resource, swstuff.dir, parseError, status);
+		icu::Transliterator *trans = instantiateTrans(ID, swstuff.resource, swstuff.dir, parseError, status);
 		return trans;
 	}
 	return NULL;
 }
 
-void  instantiateTransFactory(const UnicodeString& ID, const UnicodeString& resource,
+void  instantiateTransFactory(const icu::UnicodeString& ID, const icu::UnicodeString& resource,
 		UTransDirection dir, UParseError &parseError, UErrorCode &status )
 {
 		std::cout << "making factory for ID " << ID << std::endl;
-		Transliterator::Token context;
+		icu::Transliterator::Token context;
 		SWTransData swstuff; 
 		swstuff.resource = resource;
 		swstuff.dir = dir;
@@ -332,10 +332,10 @@ void  instantiateTransFactory(const UnicodeString& ID,
 		swpair.first = ID;
 		swpair.second = swstuff;
 		sw_tmap->insert(swpair);
-		Transliterator::registerFactory(ID, &SWTransFactory, context);
+		icu::Transliterator::registerFactory(ID, &SWTransFactory, context);
 }
 
-void  registerTrans(const UnicodeString& ID, const UnicodeString& resource,
+void  registerTrans(const icu::UnicodeString& ID, const icu::UnicodeString& resource,
 		UTransDirection dir, UErrorCode &status )
 {
 		std::cout << "registering ID locally " << ID << std::endl;
@@ -348,9 +348,9 @@ void  registerTrans(const UnicodeString& ID, const Uni
 		sw_tmap->insert(swpair);
 }
 
-bool checkTrans(const UnicodeString& ID, UErrorCode &status )
+bool checkTrans(const icu::UnicodeString& ID, UErrorCode &status )
 {
-		Transliterator *trans = Transliterator::createInstance(ID, UTRANS_FORWARD, status);
+	icu::Transliterator *trans = icu::Transliterator::createInstance(ID, UTRANS_FORWARD, status);
 		if (!U_FAILURE(status))
 		{
 			// already have it, clean up and return true
@@ -375,7 +375,7 @@ bool checkTrans(const UnicodeString& ID, UErrorCode &s
 		//std::cout << "importing: " << ID << ", " << resource << std::endl;
 		SWCharString ch(swstuff.resource);
 		UResourceBundle *bundle = ures_openDirect(SW_RESDATA, ch, &status);
-		const UnicodeString rules = ures_getUnicodeStringByKey(bundle, RB_RULE, &status);
+		const icu::UnicodeString rules = icu::ures_getUnicodeStringByKey(bundle, RB_RULE, &status);
 		ures_close(bundle);
 		//parser.parse(rules, isReverse ? UTRANS_REVERSE : UTRANS_FORWARD,
 		//        parseError, status);
@@ -386,7 +386,7 @@ bool checkTrans(const UnicodeString& ID, UErrorCode &s
 		}
 
 		
-		Transliterator *trans = Transliterator::createFromRules(ID, rules, swstuff.dir,
+		icu::Transliterator *trans = icu::Transliterator::createFromRules(ID, rules, swstuff.dir,
 			parseError,status);
 		if (U_FAILURE(status)) {
 			std::cout << "Failed to create transliterator" << std::endl;
@@ -400,7 +400,7 @@ bool checkTrans(const UnicodeString& ID, UErrorCode &s
 			return false;
 		}
 
-		Transliterator::registerInstance(trans);
+		icu::Transliterator::registerInstance(trans);
 		return true;
 		
 		//Transliterator *trans = instantiateTrans(ID, swstuff.resource, swstuff.dir, parseError, status);
@@ -412,15 +412,15 @@ bool checkTrans(const UnicodeString& ID, UErrorCode &s
 	}
 }
 
-Transliterator * createTrans(const UnicodeString& preID, const UnicodeString& ID, 
-	const UnicodeString& postID, UTransDirection dir, UErrorCode &status )
+icu::Transliterator * createTrans(const icu::UnicodeString& preID, const icu::UnicodeString& ID, 
+	const icu::UnicodeString& postID, UTransDirection dir, UErrorCode &status )
 {
 	// extract id to check from ID xxx;id;xxx
 	if (checkTrans(ID, status)) {
-		UnicodeString fullID = preID;
+		icu::UnicodeString fullID = preID;
 		fullID += ID;
 		fullID += postID;
-		Transliterator *trans = Transliterator::createInstance(fullID,UTRANS_FORWARD,status);
+		icu::Transliterator *trans = icu::Transliterator::createInstance(fullID,UTRANS_FORWARD,status);
 		if (U_FAILURE(status)) {
 			delete trans;
 			return NULL;
@@ -434,7 +434,7 @@ Transliterator * createTrans(const UnicodeString& preI
 	}
 }
 
-Transliterator * instantiateTrans(const UnicodeString& ID, const UnicodeString& resource,
+icu::Transliterator * instantiateTrans(const icu::UnicodeString& ID, const icu::UnicodeString& resource,
 		UTransDirection dir, UParseError &parseError, UErrorCode &status )
 {
 	//TransliterationRuleData *ruleData;
@@ -447,7 +447,7 @@ Transliterator * instantiateTrans(const UnicodeString&
 	std::cout << "importing: " << ID << ", " << resource << std::endl;
 	SWCharString ch(resource);
 	UResourceBundle *bundle = ures_openDirect(SW_RESDATA, ch, &status);
-	const UnicodeString rules = ures_getUnicodeStringByKey(bundle, RB_RULE, &status);
+	const icu::UnicodeString rules = icu::ures_getUnicodeStringByKey(bundle, RB_RULE, &status);
 	ures_close(bundle);
 	//parser.parse(rules, isReverse ? UTRANS_REVERSE : UTRANS_FORWARD,
     //        parseError, status);
@@ -462,7 +462,7 @@ Transliterator * instantiateTrans(const UnicodeString&
 
     //entry->entryType = Entry::RBT_DATA;
 	//return new RuleBasedTransliterator(ID, ruleData);
-	Transliterator *trans = Transliterator::createFromRules(ID, rules, dir, parseError, status);
+	icu::Transliterator *trans = icu::Transliterator::createFromRules(ID, rules, dir, parseError, status);
 	if (U_FAILURE(status)) {
 		std::cout << "Failed to create transliterator" << std::endl;
 		std::cout << "status " << u_errorName(status) << std::endl;
@@ -475,7 +475,7 @@ Transliterator * instantiateTrans(const UnicodeString&
 		return NULL;
 	}
 
-	Transliterator::registerInstance(trans);
+	icu::Transliterator::registerInstance(trans);
 	return trans;
 }
 
@@ -500,9 +500,9 @@ void initiateSwordTransliterators(UErrorCode &status)
             colBund = ures_getByIndex(transIDs, row, 0, &status);
 
             if (U_SUCCESS(status) && ures_getSize(colBund) == 4) {
-                UnicodeString id = ures_getUnicodeStringByIndex(colBund, 0, &status);
-                UChar type = ures_getUnicodeStringByIndex(colBund, 1, &status).charAt(0);
-                UnicodeString resString = ures_getUnicodeStringByIndex(colBund, 2, &status);
+                icu::UnicodeString id = icu::ures_getUnicodeStringByIndex(colBund, 0, &status);
+                UChar type = icu::ures_getUnicodeStringByIndex(colBund, 1, &status).charAt(0);
+                icu::UnicodeString resString = icu::ures_getUnicodeStringByIndex(colBund, 2, &status);
 
                 if (U_SUCCESS(status)) {
                     switch (type) {
@@ -513,7 +513,7 @@ void initiateSwordTransliterators(UErrorCode &status)
                         {
                             //UBool visible = (type == 0x0066 /*f*/);
                             UTransDirection dir =
-                                (ures_getUnicodeStringByIndex(colBund, 3, &status).charAt(0) ==
+                                (icu::ures_getUnicodeStringByIndex(colBund, 3, &status).charAt(0) ==
                                  0x0046 /*F*/) ?
                                 UTRANS_FORWARD : UTRANS_REVERSE;
                             //registry->put(id, resString, dir, visible);
@@ -567,9 +567,9 @@ void initiateSwordTransliteratorsByFactory(UErrorCode 
             colBund = ures_getByIndex(transIDs, row, 0, &status);
 
             if (U_SUCCESS(status) && ures_getSize(colBund) == 4) {
-                UnicodeString id = ures_getUnicodeStringByIndex(colBund, 0, &status);
-                UChar type = ures_getUnicodeStringByIndex(colBund, 1, &status).charAt(0);
-                UnicodeString resString = ures_getUnicodeStringByIndex(colBund, 2, &status);
+                icu::UnicodeString id = icu::ures_getUnicodeStringByIndex(colBund, 0, &status);
+                UChar type = icu::ures_getUnicodeStringByIndex(colBund, 1, &status).charAt(0);
+                icu::UnicodeString resString = icu::ures_getUnicodeStringByIndex(colBund, 2, &status);
 				std::cout << "ok so far" << std::endl;
 
                 if (U_SUCCESS(status)) {
@@ -581,7 +581,7 @@ void initiateSwordTransliteratorsByFactory(UErrorCode 
                         {
                             //UBool visible = (type == 0x0066 /*f*/);
                             UTransDirection dir =
-                                (ures_getUnicodeStringByIndex(colBund, 3, &status).charAt(0) ==
+                                (icu::ures_getUnicodeStringByIndex(colBund, 3, &status).charAt(0) ==
                                  0x0046 /*F*/) ?
                                 UTRANS_FORWARD : UTRANS_REVERSE;
                             //registry->put(id, resString, dir, visible);
@@ -636,9 +636,9 @@ void initiateSwordTransliteratorsToMap(UErrorCode &sta
             colBund = ures_getByIndex(transIDs, row, 0, &status);
 
             if (U_SUCCESS(status) && ures_getSize(colBund) == 4) {
-                UnicodeString id = ures_getUnicodeStringByIndex(colBund, 0, &status);
-                UChar type = ures_getUnicodeStringByIndex(colBund, 1, &status).charAt(0);
-                UnicodeString resString = ures_getUnicodeStringByIndex(colBund, 2, &status);
+                icu::UnicodeString id = icu::ures_getUnicodeStringByIndex(colBund, 0, &status);
+                UChar type = icu::ures_getUnicodeStringByIndex(colBund, 1, &status).charAt(0);
+                icu::UnicodeString resString = icu::ures_getUnicodeStringByIndex(colBund, 2, &status);
 				std::cout << "ok so far" << std::endl;
 
                 if (U_SUCCESS(status)) {
@@ -650,7 +650,7 @@ void initiateSwordTransliteratorsToMap(UErrorCode &sta
                         {
                             //UBool visible = (type == 0x0066 /*f*/);
                             UTransDirection dir =
-                                (ures_getUnicodeStringByIndex(colBund, 3, &status).charAt(0) ==
+                                (icu::ures_getUnicodeStringByIndex(colBund, 3, &status).charAt(0) ==
                                  0x0046 /*F*/) ?
                                 UTRANS_FORWARD : UTRANS_REVERSE;
                             //registry->put(id, resString, dir, visible);
@@ -690,11 +690,11 @@ int main()
 {
 	sw_tmap = new SWTransMap();
 	UErrorCode status = U_ZERO_ERROR;
-	std::cout << "Available before: " << Transliterator::countAvailableIDs() << std::endl;
+	std::cout << "Available before: " << icu::Transliterator::countAvailableIDs() << std::endl;
 	//initiateSwordTransliterators(status);
 	//initiateSwordTransliteratorsByFactory(status);
 	initiateSwordTransliteratorsToMap(status);
-	int32_t cids = Transliterator::countAvailableIDs();
+	int32_t cids = icu::Transliterator::countAvailableIDs();
 	std::cout << "Available after: " << cids << std::endl;
 
 	//for ( int32_t i=0;i<cids;i++) {
@@ -702,7 +702,7 @@ int main()
 	//}
 
 	//Transliterator *trans = Transliterator::createInstance("NFD;Latin-Gothic;NFC", UTRANS_FORWARD,status);
-	Transliterator *trans = createTrans("NFD;", "Latin-Gothic", ";NFC", UTRANS_FORWARD,status);
+	icu::Transliterator *trans = createTrans("NFD;", "Latin-Gothic", ";NFC", UTRANS_FORWARD,status);
     if (U_FAILURE(status)) {
 	std::cout << "Failed to get Latin-Gothic" << std::endl;
 	status = U_ZERO_ERROR;
@@ -713,7 +713,7 @@ int main()
 	delete trans;
 	}
 	
-	std::cout << "Available after gothic: " << Transliterator::countAvailableIDs() << std::endl;
+	std::cout << "Available after gothic: " << icu::Transliterator::countAvailableIDs() << std::endl;
 
 	//trans = Transliterator::createInstance("NFD;BGreek-Greek;NFC", UTRANS_FORWARD, status);
 	trans = createTrans("NFD;", "BGreek-Greek", ";NFC", UTRANS_FORWARD, status);
@@ -726,7 +726,7 @@ int main()
 	std::cout << "Got BGreek-Greek :)" << std::endl;
 	delete trans;
 	}
-	std::cout << "Available after greek: " << Transliterator::countAvailableIDs() << std::endl;
+	std::cout << "Available after greek: " << icu::Transliterator::countAvailableIDs() << std::endl;
 
 	delete sw_tmap;
 
