$OpenBSD$

Index: src/modules/filters/utf8transliterator.cpp
--- src/modules/filters/utf8transliterator.cpp.orig
+++ src/modules/filters/utf8transliterator.cpp
@@ -107,14 +107,14 @@ const char UTF8Transliterator::SW_RESDATA[] = "/usr/lo
 
 class SWCharString {
  public:
-    inline SWCharString(const UnicodeString& str);
+    inline SWCharString(const icu::UnicodeString& str);
     inline ~SWCharString();
     inline operator const char*() { return ptr; }
  private:
     char buf[128];
     char* ptr;
 };
-SWCharString::SWCharString(const UnicodeString& str) {
+SWCharString::SWCharString(const icu::UnicodeString& str) {
     // TODO This isn't quite right -- we should probably do
     // preflighting here to determine the real length.
     if (str.length() >= (int32_t)sizeof(buf)) {
@@ -176,9 +176,9 @@ void UTF8Transliterator::Load(UErrorCode &status)
 			colBund = ures_getByIndex(transIDs, row, 0, &status);
 
 			if (U_SUCCESS(status) && ures_getSize(colBund) == 4) {
-				UnicodeString id = ures_getUnicodeStringByIndex(colBund, 0, &status);
+				icu::UnicodeString id = ures_getUnicodeStringByIndex(colBund, 0, &status);
                         	UChar type = ures_getUnicodeStringByIndex(colBund, 1, &status).charAt(0);
-				UnicodeString resString = ures_getUnicodeStringByIndex(colBund, 2, &status);
+				icu::UnicodeString resString = ures_getUnicodeStringByIndex(colBund, 2, &status);
                         	SWLog::getSystemLog()->logDebug("ok so far");
 
 				 if (U_SUCCESS(status)) {
@@ -223,7 +223,7 @@ void UTF8Transliterator::Load(UErrorCode &status)
 #endif // _ICUSWORD_
 }
 
-void  UTF8Transliterator::registerTrans(const UnicodeString& ID, const UnicodeString& resource,
+void  UTF8Transliterator::registerTrans(const icu::UnicodeString& ID, const icu::UnicodeString& resource,
 		UTransDirection dir, UErrorCode &status )
 {
 #ifndef _ICUSWORD_
@@ -238,7 +238,7 @@ void  UTF8Transliterator::registerTrans(const UnicodeS
 #endif
 }
 
-bool UTF8Transliterator::checkTrans(const UnicodeString& ID, UErrorCode &status )
+bool UTF8Transliterator::checkTrans(const icu::UnicodeString& ID, UErrorCode &status )
 {
 #ifndef _ICUSWORD_
 		Transliterator *trans = Transliterator::createInstance(ID, UTRANS_FORWARD, status);
@@ -266,7 +266,7 @@ bool UTF8Transliterator::checkTrans(const UnicodeStrin
 		//std::cout << "importing: " << ID << ", " << resource << std::endl;
 		SWCharString ch(swstuff.resource);
 		UResourceBundle *bundle = ures_openDirect(SW_RESDATA, ch, &status);
-		const UnicodeString rules = ures_getUnicodeStringByKey(bundle, SW_RB_RULE, &status);
+		const icu::UnicodeString rules = ures_getUnicodeStringByKey(bundle, SW_RB_RULE, &status);
 		ures_close(bundle);
 		//parser.parse(rules, isReverse ? UTRANS_REVERSE : UTRANS_FORWARD,
 		//        parseError, status);
@@ -311,7 +311,7 @@ bool UTF8Transliterator::addTrans(const char* newTrans
 #ifdef ICU_CUSTOM_RESOURCE_BUILDING
 #ifdef _ICUSWORD_
 	UErrorCode status;
-	if (checkTrans(UnicodeString(newTrans), status)) {
+	if (checkTrans(icu::UnicodeString(newTrans), status)) {
 #endif
 #endif // ICU_CUSTOM_RESOURCE_BUILDING
 		*transList += newTrans;
@@ -328,9 +328,9 @@ bool UTF8Transliterator::addTrans(const char* newTrans
 }
 
 
-Transliterator * UTF8Transliterator::createTrans(const UnicodeString& ID, UTransDirection dir, UErrorCode &status )
+icu::Transliterator * UTF8Transliterator::createTrans(const icu::UnicodeString& ID, UTransDirection dir, UErrorCode &status )
 {
-	Transliterator *trans = Transliterator::createInstance(ID,UTRANS_FORWARD,status);
+	icu::Transliterator *trans = icu::Transliterator::createInstance(ID,UTRANS_FORWARD,status);
 	if (U_FAILURE(status)) {
 		delete trans;
 		return NULL;
@@ -906,9 +906,9 @@ char UTF8Transliterator::processText(SWBuf &text, cons
                 addTrans("NFC", &ID);
 
                 err = U_ZERO_ERROR;
-                Transliterator * trans = createTrans(UnicodeString(ID), UTRANS_FORWARD, err);
+		icu::Transliterator * trans = createTrans(icu::UnicodeString(ID), UTRANS_FORWARD, err);
                 if (trans && !U_FAILURE(err)) {
-                        UnicodeString target = UnicodeString(source);
+			icu::UnicodeString target = icu::UnicodeString(source);
 			trans->transliterate(target);
 			text.setSize(text.size()*2);
 			len = ucnv_fromUChars(conv, text.getRawData(), text.size(), target.getBuffer(), target.length(), &err);
